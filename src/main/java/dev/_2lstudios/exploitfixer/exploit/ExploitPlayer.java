package dev._2lstudios.exploitfixer.exploit;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.ItemMeta;

import dev._2lstudios.exploitfixer.modules.interfaces.ViolationModule;

public abstract class ExploitPlayer {
    private UUID uuid;
    private Map<ViolationModule, Double> violations = new HashMap<>();
    private Map<String, Integer> packets = new ConcurrentHashMap<>();
    private Collection<Collection<String>> punishments = new HashSet<>();

    // The list of book pages present in the current inventory
    private Collection<String> inventoryBookPages = new HashSet<>();
    // The list of names present in this inventory
    private Collection<String> inventoryBookAuthors = new HashSet<>();
    // The list of names in the current inventory
    private Collection<String> inventoryMaterials = new HashSet<>();
    // The list of names in the current inventory
    private Collection<String> inventoryNames = new HashSet<>();
    // The list of lores in the current inventory
    private Collection<String> inventoryLores = new HashSet<>();

    private int packetCount = 0;
    private long lastViolation = 0;
    private long lastPortalUse = 0;
    private long lastShear = 0;

    public ExploitPlayer(UUID uuid) {
        this.uuid = uuid;
    }

    public void clearPunishments() {
        this.punishments.clear();
    }

    public Collection<Collection<String>> getPunishments() {
        return punishments;
    }

    public long getLastViolation() {
        return lastViolation;
    }

    public void setLastViolation(long lastPortalUse) {
        this.lastViolation = lastPortalUse;
    }

    public long getLastPortalUse() {
        return lastPortalUse;
    }

    public void setLastPortalUse(long lastPortalUse) {
        this.lastPortalUse = lastPortalUse;
    }

    public Map<ViolationModule, Double> getViolations() {
        return violations;
    }

    public double getViolations(ViolationModule module) {
        return violations.getOrDefault(module, 0D);
    }

    public UUID getUUID() {
        return uuid;
    }

    public abstract String getName();

    public abstract int getPing();

    public abstract String getLocale();

    public boolean hasShearCooldown() {
        return System.currentTimeMillis() - lastShear <= 1000;
    }

    public void setShearCooldown() {
        lastShear = System.currentTimeMillis();
    }

    public void addPacket(String packetName) {
        packetCount++;
        packets.put(packetName, packets.getOrDefault(packetName, 0) + 1);
    }

    public void clearPackets() {
        packetCount = 0;
        packets.clear();
    }

    public String getPacketsText() {
        StringBuilder stringBuilder = new StringBuilder("Received Packets (x" + packetCount + "):");

        for (Entry<String, Integer> packet : packets.entrySet()) {
            stringBuilder.append("\n- x" + packet.getValue() + " " + packet.getKey());
        }

        return stringBuilder.toString();
    }

    public void addInventoryItem(ItemStack item) {
        if (item == null) {
            return;
        }
        
        inventoryMaterials.add(item.getType().name());
        
        ItemMeta meta = item.getItemMeta();

        if (meta == null) {
            return;
        }

        if (meta.hasDisplayName()) inventoryNames.add(meta.getDisplayName());
        if (meta.hasLore()) inventoryLores.addAll(meta.getLore());

        if (meta instanceof BookMeta) {
            BookMeta bookMeta = (BookMeta) meta;

            if (bookMeta.hasAuthor()) inventoryBookAuthors.add(bookMeta.getAuthor());
            if (bookMeta.hasPages()) inventoryBookPages.addAll(bookMeta.getPages());
        }
    }

    public void clearInventoryItems() {
        inventoryNames.clear();
        inventoryLores.clear();
        inventoryMaterials.clear();
        inventoryBookPages.clear();
        inventoryBookAuthors.clear();
    }

    public boolean isInventoryItem(ItemStack item) {
        if (item.getType() != Material.AIR && !inventoryMaterials.contains(item.getType().name())) {
            return false;
        }

        ItemMeta meta = item.getItemMeta();

        if (meta == null) {
            return true;
        }

        if (meta.hasDisplayName() && !inventoryNames.contains(meta.getDisplayName())) {
            return false;
        }

        if (meta.hasLore() && !inventoryLores.containsAll(meta.getLore())) {
            return false;
        }

        if (meta instanceof BookMeta) {
            BookMeta bookMeta = (BookMeta) meta;

            if (bookMeta.hasAuthor() && !inventoryBookAuthors.contains(bookMeta.getAuthor())) {
                return false;
            }

            if (bookMeta.hasPages() && !inventoryBookPages.containsAll(bookMeta.getPages())) {
                return false;
            }
        }

        return true;
    }
}