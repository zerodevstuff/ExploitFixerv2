package dev._2lstudios.exploitfixer.exploit;

import java.util.Collection;
import java.util.HashSet;
import java.util.Map;
import java.util.UUID;

import org.bukkit.Server;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.Cancellable;
import org.bukkit.inventory.InventoryView;
import org.bukkit.plugin.Plugin;
import org.bukkit.scheduler.BukkitScheduler;

import dev._2lstudios.exploitfixer.managers.ExploitPlayerManager;
import dev._2lstudios.exploitfixer.managers.ModuleManager;
import dev._2lstudios.exploitfixer.modules.MessagesModule;
import dev._2lstudios.exploitfixer.modules.NotificationsModule;
import dev._2lstudios.exploitfixer.modules.interfaces.Module;
import dev._2lstudios.exploitfixer.modules.interfaces.ViolationModule;
import dev._2lstudios.exploitfixer.utils.ReflectionUtil;
import dev._2lstudios.hamsterapi.enums.PacketType;
import dev._2lstudios.hamsterapi.hamsterplayer.HamsterPlayer;
import dev._2lstudios.hamsterapi.wrappers.PacketWrapper;

public class BukkitExploitPlayer extends ExploitPlayer {
	private Plugin plugin;
	private ExploitPlayerManager exploitPlayerManager;
	private MessagesModule messagesModule;
	private NotificationsModule notificationsModule;

	// The currently opened inventory
	// It has to be accessed from here to synchronize
	private InventoryView openInventory;

	// Permission to bypass the items fix module
	private boolean bypassItemsFix = false;

	public BukkitExploitPlayer(Plugin plugin, ModuleManager moduleManager, UUID uuid) {
		super(uuid);
		this.plugin = plugin;
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
		this.messagesModule = moduleManager.getMessagesModule();
		this.notificationsModule = moduleManager.getNotificationsModule();
	}

	public void addVls(Cancellable event, HamsterPlayer hamsterPlayer,
			ViolationModule module, double amount) {
		addVls(event, null, hamsterPlayer, module, amount);
	}

	public void addVls(Cancellable event, PacketWrapper packet,
	HamsterPlayer hamsterPlayer, ViolationModule module, double amount) {
		addVls(event, packet, hamsterPlayer, module, amount, "Other");
	}

	public void addVls(Cancellable event, PacketWrapper packet,
			HamsterPlayer hamsterPlayer, ViolationModule module, double amount, String category) {
		Violations violations = (Violations) module.getViolations();

		if (violations != null) {
			Map<ViolationModule, Double> violationsMap = getViolations();
			long currentTime = System.currentTimeMillis();
			long lastViolation = getLastViolation();

			if (currentTime - lastViolation >= 1000) {
				clearPackets();
				clearPunishments();
				setLastViolation(currentTime);

				for (ViolationModule violationModule : new HashSet<>(violationsMap.keySet())) {
					double vls = violationsMap.get(violationModule) - violationModule.getReduceVls();

					if (vls <= 0) {
						violationsMap.remove(violationModule);
					} else {
						violationsMap.put(violationModule, vls);
					}
				}
			}

			double newVls = getViolations(module) + amount;

			violationsMap.put(module, newVls);
			notificationsModule.addCategorizedVl(category, amount);

			if (event instanceof Cancellable && module.getCancelVls() <= newVls) {
				((Cancellable) event).setCancelled(true);
				exploitPlayerManager.addPacketsCancelled();
			}

			for (int threshold : violations.getViolations()) {
				if (threshold <= newVls) {
					Collection<String> commands = violations.getCommands(threshold);

					punish(module, hamsterPlayer, packet, commands, (int) newVls);
				}
			}
		}
	}

	public void punish(Module module, HamsterPlayer hamsterPlayer, PacketWrapper packet,
			Collection<String> punishments, int newVls) {
		Collection<Collection<String>> punishmentsDone = this.getPunishments();

		if (!punishments.isEmpty() && !punishmentsDone.contains(punishments)) {
			Server server = plugin.getServer();
			CommandSender consoleSender = server.getConsoleSender();
			BukkitScheduler scheduler = server.getScheduler();
			Player player = hamsterPlayer.getPlayer();
			String playerName = player.getName();

			for (String punishment : punishments) {
				if (punishment.equals("kick")) {
					String locale = getLocale();
					String kickMessage = messagesModule.getKickMessage(module, locale);

					hamsterPlayer.disconnect(kickMessage);

					// When kicked, count as punishment
					exploitPlayerManager.addKicked();
				} else if (punishment.equals("notification")) {
					String moduleName = module.getName();

					if (packet != null) {
						PacketType packetType = packet.getType();

						if (packetType != null) {
							notificationsModule.sendNotification(packetType.toString(), this, newVls);
						} else {
							notificationsModule.sendNotification(moduleName, this, newVls);
						}
					} else {
						notificationsModule.sendNotification(moduleName, this, newVls);
					}
				} else {
					String check_name = packet != null ? packet.getType().toString() : module.getName();
					int ping = getPing();
					String replacement_punishment = punishment
							.replace("%player%", playerName)
							.replace("%vls%", String.valueOf(newVls))
							.replace("%ping%", String.valueOf(ping))
							.replace("%check%", check_name);
					if (server.isPrimaryThread()) {
						server.dispatchCommand(consoleSender, replacement_punishment);
					} else {
						scheduler.runTask(plugin, () -> {
							server.dispatchCommand(consoleSender, replacement_punishment);
						});
					}
				}
				
				// Add this punishment as already done to not execute twice
				punishmentsDone.add(punishments);
			}
		}
	}

	public Player getPlayer() {
		return plugin.getServer().getPlayer(getUUID());
	}

	public String getLocale() {
		Player player = getPlayer();

		if (player != null && player.isOnline()) {
			String locale = ReflectionUtil.getLocale(player);
			
			if (locale != null && locale.length() > 1) {
				locale = locale.substring(0, 2);
			}

			return locale;
		}

		return null;
	}

	public int getPing() {
		Player player = getPlayer();

		if (player != null && player.isOnline()) {
			try {
				return (int) ReflectionUtil.getPing(player);
			} catch (Throwable ex) { /* Couldn't get ping */ }
		}

		return 0;
	}

	public String getName() {
		Player player = plugin.getServer().getPlayer(getUUID());

		if (player != null && player.isOnline()) {
			return player.getName();
		}

		return "N/A";
	}

	public boolean isBypassItemsFix() {
		return bypassItemsFix;
	}

	public void setBypassItemsFix(boolean bypassItemsFix) {
		this.bypassItemsFix = bypassItemsFix;
	}

    public InventoryView getOpenInventory() {
        return getPlayer().getOpenInventory();
    }
}
