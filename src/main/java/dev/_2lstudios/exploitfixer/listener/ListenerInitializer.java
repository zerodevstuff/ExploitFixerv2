package dev._2lstudios.exploitfixer.listener;

import org.bukkit.Server;
import org.bukkit.event.HandlerList;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.PluginManager;

import dev._2lstudios.exploitfixer.managers.ModuleManager;
import dev._2lstudios.exploitfixer.utils.ExploitUtil;

public class ListenerInitializer {
	private Plugin plugin;
	private ModuleManager moduleManager;
	private boolean registered = false;

	public ListenerInitializer(Plugin plugin, ModuleManager moduleManager) {
		this.plugin = plugin;
		this.moduleManager = moduleManager;
	}

	public void register() {
		this.registered = true;

		Server server = plugin.getServer();
		PluginManager pluginManager = server.getPluginManager();
		ExploitUtil exploitUtil = new ExploitUtil(moduleManager);

		pluginManager.registerEvents(new BlockBreakListener(moduleManager), plugin);
		pluginManager.registerEvents(new BlockDispenseListener(moduleManager), plugin);
		pluginManager.registerEvents(new BlockPlaceListener(moduleManager), plugin);
		pluginManager.registerEvents(new BucketEmptyListener(moduleManager), plugin);
		pluginManager.registerEvents(new ChunkUnloadListener(moduleManager), plugin);
		pluginManager.registerEvents(new EntityDamageByEntityListener(moduleManager), plugin);
		pluginManager.registerEvents(new EntityTeleportListener(moduleManager), plugin);
		pluginManager.registerEvents(new InventoryClickListener(moduleManager), plugin);
		pluginManager.registerEvents(new PlayerInteractEntityListener(moduleManager), plugin);
		pluginManager.registerEvents(new PacketDecodeListener(exploitUtil, moduleManager), plugin);
		pluginManager.registerEvents(new PacketReceiveListener(exploitUtil, moduleManager), plugin);
		pluginManager.registerEvents(new PlayerCommandListener(exploitUtil, moduleManager), plugin);
		pluginManager.registerEvents(new PlayerInteractListener(moduleManager), plugin);
		pluginManager.registerEvents(new PlayerLoginListener(moduleManager), plugin);
		pluginManager.registerEvents(new PlayerMoveListener(moduleManager), plugin);
		pluginManager.registerEvents(new PlayerQuitListener(moduleManager), plugin);
		pluginManager.registerEvents(new PlayerShearEntityListener(moduleManager), plugin);
		pluginManager.registerEvents(new PlayerTeleportListener(moduleManager), plugin);
		pluginManager.registerEvents(new ProjectileLaunchListener(moduleManager), plugin);
		pluginManager.registerEvents(new StructureGrowListener(moduleManager), plugin);
	}

	public void unregister() {
		this.registered = false;

		HandlerList.unregisterAll(plugin);
	}

	public boolean isRegistered() {
		return this.registered;
	}
}
